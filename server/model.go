package main

import (
	"sync"
	"time"

	"github.com/google/uuid"
)

const (
	// GameRecoveryWindow is the time the game waits if a player is disconnected before gracefully cleaning up
	GameRecoveryWindow = 20 * time.Second

	// LevelRecoveryWindow is the time the level waits if a player is disconnected before gracefully cleaning up
	LevelRecoveryWindow = 20 * time.Second
)

// Player is a game player
type Player struct {
	ID           string   // player identifier (generated by client)
	Index        int      // player index
	GameChannel  *Channel // queue of game events for the player
	LevelChannel *Channel // the queue of level events for the player
}

// NewPlayer creates a new role
func NewPlayer(id string, index int) *Player {
	return &Player{
		ID:           id,
		GameChannel:  NewChannel(),
		LevelChannel: nil,
		Index:        index,
	}
}

// Game is a running instance of a SenSense game
type Game struct {
	Name        string             //the name of game being played
	Code        string             // player friendly code generated by the server for the player to join the game
	LevelID     *uuid.UUID         // the active level identifier (used to ensure that only one level is active)
	ID          uuid.UUID          // the game identifier generated by the server
	Lock        sync.Mutex         // the lock to serialize the game from modification
	Players     map[string]*Player // the players of the game
	PlayerCount int                // the number of players required for the game
}

// EndLevelCallback is raised when a level ends
type EndLevelCallback func()

// Level is a running instance of a game level
type Level struct {
	EndLevelCallback EndLevelCallback // a callback that is raised when the game ends (used to deactivate the game level)
	ID               uuid.UUID        // the level identifier generated by the server

	Lock    sync.Mutex         // the lock to serialize the level from modification
	Players map[string]*Player // the players of the level
}
