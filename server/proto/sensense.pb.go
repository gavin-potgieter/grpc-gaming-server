// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: sensense.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GameEvent_Type int32

const (
	GameEvent_PLAYER_COUNT_CHANGED GameEvent_Type = 0
	GameEvent_PUZZLE_STARTED       GameEvent_Type = 1
)

// Enum value maps for GameEvent_Type.
var (
	GameEvent_Type_name = map[int32]string{
		0: "PLAYER_COUNT_CHANGED",
		1: "PUZZLE_STARTED",
	}
	GameEvent_Type_value = map[string]int32{
		"PLAYER_COUNT_CHANGED": 0,
		"PUZZLE_STARTED":       1,
	}
)

func (x GameEvent_Type) Enum() *GameEvent_Type {
	p := new(GameEvent_Type)
	*p = x
	return p
}

func (x GameEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sensense_proto_enumTypes[0].Descriptor()
}

func (GameEvent_Type) Type() protoreflect.EnumType {
	return &file_sensense_proto_enumTypes[0]
}

func (x GameEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameEvent_Type.Descriptor instead.
func (GameEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{7, 0}
}

type PuzzleEvent_Type int32

const (
	PuzzleEvent_DATA_INT    PuzzleEvent_Type = 0
	PuzzleEvent_DATA_STRING PuzzleEvent_Type = 1
)

// Enum value maps for PuzzleEvent_Type.
var (
	PuzzleEvent_Type_name = map[int32]string{
		0: "DATA_INT",
		1: "DATA_STRING",
	}
	PuzzleEvent_Type_value = map[string]int32{
		"DATA_INT":    0,
		"DATA_STRING": 1,
	}
)

func (x PuzzleEvent_Type) Enum() *PuzzleEvent_Type {
	p := new(PuzzleEvent_Type)
	*p = x
	return p
}

func (x PuzzleEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PuzzleEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sensense_proto_enumTypes[1].Descriptor()
}

func (PuzzleEvent_Type) Type() protoreflect.EnumType {
	return &file_sensense_proto_enumTypes[1]
}

func (x PuzzleEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PuzzleEvent_Type.Descriptor instead.
func (PuzzleEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{9, 0}
}

type CreateGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *CreateGameRequest) Reset() {
	*x = CreateGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGameRequest) ProtoMessage() {}

func (x *CreateGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGameRequest.ProtoReflect.Descriptor instead.
func (*CreateGameRequest) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{0}
}

func (x *CreateGameRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type CreateGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCode string `protobuf:"bytes,1,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
	GameId   string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *CreateGameResponse) Reset() {
	*x = CreateGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGameResponse) ProtoMessage() {}

func (x *CreateGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGameResponse.ProtoReflect.Descriptor instead.
func (*CreateGameResponse) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGameResponse) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *CreateGameResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type JoinGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameCode string `protobuf:"bytes,2,opt,name=game_code,json=gameCode,proto3" json:"game_code,omitempty"`
}

func (x *JoinGameRequest) Reset() {
	*x = JoinGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameRequest) ProtoMessage() {}

func (x *JoinGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameRequest.ProtoReflect.Descriptor instead.
func (*JoinGameRequest) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{2}
}

func (x *JoinGameRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *JoinGameRequest) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

type JoinGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *JoinGameResponse) Reset() {
	*x = JoinGameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameResponse) ProtoMessage() {}

func (x *JoinGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameResponse.ProtoReflect.Descriptor instead.
func (*JoinGameResponse) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{3}
}

func (x *JoinGameResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type RejoinGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameId   string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *RejoinGameRequest) Reset() {
	*x = RejoinGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejoinGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejoinGameRequest) ProtoMessage() {}

func (x *RejoinGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejoinGameRequest.ProtoReflect.Descriptor instead.
func (*RejoinGameRequest) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{4}
}

func (x *RejoinGameRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *RejoinGameRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type LeaveGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameId   string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *LeaveGameRequest) Reset() {
	*x = LeaveGameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGameRequest) ProtoMessage() {}

func (x *LeaveGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGameRequest.ProtoReflect.Descriptor instead.
func (*LeaveGameRequest) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{5}
}

func (x *LeaveGameRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *LeaveGameRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type ListenGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameId   string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *ListenGame) Reset() {
	*x = ListenGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenGame) ProtoMessage() {}

func (x *ListenGame) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenGame.ProtoReflect.Descriptor instead.
func (*ListenGame) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{6}
}

func (x *ListenGame) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ListenGame) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type GameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     GameEvent_Type `protobuf:"varint,1,opt,name=type,proto3,enum=GameEvent_Type" json:"type,omitempty"`
	Count    int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	PuzzleId string         `protobuf:"bytes,3,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
}

func (x *GameEvent) Reset() {
	*x = GameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent) ProtoMessage() {}

func (x *GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent.ProtoReflect.Descriptor instead.
func (*GameEvent) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{7}
}

func (x *GameEvent) GetType() GameEvent_Type {
	if x != nil {
		return x.Type
	}
	return GameEvent_PLAYER_COUNT_CHANGED
}

func (x *GameEvent) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GameEvent) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

type StartPuzzleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId            string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	InitialConditions string `protobuf:"bytes,3,opt,name=initial_conditions,json=initialConditions,proto3" json:"initial_conditions,omitempty"`
}

func (x *StartPuzzleRequest) Reset() {
	*x = StartPuzzleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPuzzleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPuzzleRequest) ProtoMessage() {}

func (x *StartPuzzleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPuzzleRequest.ProtoReflect.Descriptor instead.
func (*StartPuzzleRequest) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{8}
}

func (x *StartPuzzleRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *StartPuzzleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartPuzzleRequest) GetInitialConditions() string {
	if x != nil {
		return x.InitialConditions
	}
	return ""
}

type PuzzleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PuzzleId    string           `protobuf:"bytes,1,opt,name=puzzle_id,json=puzzleId,proto3" json:"puzzle_id,omitempty"`
	PlayerId    string           `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Type        PuzzleEvent_Type `protobuf:"varint,3,opt,name=type,proto3,enum=PuzzleEvent_Type" json:"type,omitempty"`
	Key         string           `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	ValueInt    int32            `protobuf:"varint,5,opt,name=value_int,json=valueInt,proto3" json:"value_int,omitempty"`
	ValueString string           `protobuf:"bytes,6,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
	Transient   bool             `protobuf:"varint,7,opt,name=transient,proto3" json:"transient,omitempty"`
}

func (x *PuzzleEvent) Reset() {
	*x = PuzzleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensense_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzleEvent) ProtoMessage() {}

func (x *PuzzleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sensense_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzleEvent.ProtoReflect.Descriptor instead.
func (*PuzzleEvent) Descriptor() ([]byte, []int) {
	return file_sensense_proto_rawDescGZIP(), []int{9}
}

func (x *PuzzleEvent) GetPuzzleId() string {
	if x != nil {
		return x.PuzzleId
	}
	return ""
}

func (x *PuzzleEvent) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PuzzleEvent) GetType() PuzzleEvent_Type {
	if x != nil {
		return x.Type
	}
	return PuzzleEvent_DATA_INT
}

func (x *PuzzleEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PuzzleEvent) GetValueInt() int32 {
	if x != nil {
		return x.ValueInt
	}
	return 0
}

func (x *PuzzleEvent) GetValueString() string {
	if x != nil {
		return x.ValueString
	}
	return ""
}

func (x *PuzzleEvent) GetTransient() bool {
	if x != nil {
		return x.Transient
	}
	return false
}

var File_sensense_proto protoreflect.FileDescriptor

var file_sensense_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0f, 0x4a,
	0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x11, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x22, 0x48, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x99,
	0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x70, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x02, 0x0a,
	0x0b, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x32, 0xc4, 0x02, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x04, 0x4a, 0x6f, 0x69,
	0x6e, 0x12, 0x10, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x6a, 0x6f,
	0x69, 0x6e, 0x12, 0x12, 0x2e, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x11, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x0b,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x0a, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x32, 0x3a, 0x0a, 0x0d, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x53, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x0c, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sensense_proto_rawDescOnce sync.Once
	file_sensense_proto_rawDescData = file_sensense_proto_rawDesc
)

func file_sensense_proto_rawDescGZIP() []byte {
	file_sensense_proto_rawDescOnce.Do(func() {
		file_sensense_proto_rawDescData = protoimpl.X.CompressGZIP(file_sensense_proto_rawDescData)
	})
	return file_sensense_proto_rawDescData
}

var file_sensense_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sensense_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sensense_proto_goTypes = []interface{}{
	(GameEvent_Type)(0),        // 0: GameEvent.Type
	(PuzzleEvent_Type)(0),      // 1: PuzzleEvent.Type
	(*CreateGameRequest)(nil),  // 2: CreateGameRequest
	(*CreateGameResponse)(nil), // 3: CreateGameResponse
	(*JoinGameRequest)(nil),    // 4: JoinGameRequest
	(*JoinGameResponse)(nil),   // 5: JoinGameResponse
	(*RejoinGameRequest)(nil),  // 6: RejoinGameRequest
	(*LeaveGameRequest)(nil),   // 7: LeaveGameRequest
	(*ListenGame)(nil),         // 8: ListenGame
	(*GameEvent)(nil),          // 9: GameEvent
	(*StartPuzzleRequest)(nil), // 10: StartPuzzleRequest
	(*PuzzleEvent)(nil),        // 11: PuzzleEvent
	(*empty.Empty)(nil),        // 12: google.protobuf.Empty
}
var file_sensense_proto_depIdxs = []int32{
	0,  // 0: GameEvent.type:type_name -> GameEvent.Type
	1,  // 1: PuzzleEvent.type:type_name -> PuzzleEvent.Type
	2,  // 2: GameService.Create:input_type -> CreateGameRequest
	4,  // 3: GameService.Join:input_type -> JoinGameRequest
	6,  // 4: GameService.Rejoin:input_type -> RejoinGameRequest
	7,  // 5: GameService.Leave:input_type -> LeaveGameRequest
	10, // 6: GameService.StartPuzzle:input_type -> StartPuzzleRequest
	8,  // 7: GameService.Listen:input_type -> ListenGame
	11, // 8: PuzzleService.Solve:input_type -> PuzzleEvent
	3,  // 9: GameService.Create:output_type -> CreateGameResponse
	5,  // 10: GameService.Join:output_type -> JoinGameResponse
	12, // 11: GameService.Rejoin:output_type -> google.protobuf.Empty
	12, // 12: GameService.Leave:output_type -> google.protobuf.Empty
	12, // 13: GameService.StartPuzzle:output_type -> google.protobuf.Empty
	9,  // 14: GameService.Listen:output_type -> GameEvent
	11, // 15: PuzzleService.Solve:output_type -> PuzzleEvent
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_sensense_proto_init() }
func file_sensense_proto_init() {
	if File_sensense_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sensense_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejoinGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPuzzleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensense_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sensense_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_sensense_proto_goTypes,
		DependencyIndexes: file_sensense_proto_depIdxs,
		EnumInfos:         file_sensense_proto_enumTypes,
		MessageInfos:      file_sensense_proto_msgTypes,
	}.Build()
	File_sensense_proto = out.File
	file_sensense_proto_rawDesc = nil
	file_sensense_proto_goTypes = nil
	file_sensense_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	// unary services
	Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	Join(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	Rejoin(ctx context.Context, in *RejoinGameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Leave(ctx context.Context, in *LeaveGameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartPuzzle(ctx context.Context, in *StartPuzzleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// streaming service
	Listen(ctx context.Context, in *ListenGame, opts ...grpc.CallOption) (GameService_ListenClient, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, "/GameService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Join(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, "/GameService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Rejoin(ctx context.Context, in *RejoinGameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/GameService/Rejoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Leave(ctx context.Context, in *LeaveGameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/GameService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StartPuzzle(ctx context.Context, in *StartPuzzleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/GameService/StartPuzzle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Listen(ctx context.Context, in *ListenGame, opts ...grpc.CallOption) (GameService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GameService_serviceDesc.Streams[0], "/GameService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_ListenClient interface {
	Recv() (*GameEvent, error)
	grpc.ClientStream
}

type gameServiceListenClient struct {
	grpc.ClientStream
}

func (x *gameServiceListenClient) Recv() (*GameEvent, error) {
	m := new(GameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	// unary services
	Create(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	Join(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	Rejoin(context.Context, *RejoinGameRequest) (*empty.Empty, error)
	Leave(context.Context, *LeaveGameRequest) (*empty.Empty, error)
	StartPuzzle(context.Context, *StartPuzzleRequest) (*empty.Empty, error)
	// streaming service
	Listen(*ListenGame, GameService_ListenServer) error
}

// UnimplementedGameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (*UnimplementedGameServiceServer) Create(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGameServiceServer) Join(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedGameServiceServer) Rejoin(context.Context, *RejoinGameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rejoin not implemented")
}
func (*UnimplementedGameServiceServer) Leave(context.Context, *LeaveGameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedGameServiceServer) StartPuzzle(context.Context, *StartPuzzleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPuzzle not implemented")
}
func (*UnimplementedGameServiceServer) Listen(*ListenGame, GameService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Create(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Join(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Rejoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Rejoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameService/Rejoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Rejoin(ctx, req.(*RejoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Leave(ctx, req.(*LeaveGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StartPuzzle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPuzzleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StartPuzzle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameService/StartPuzzle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StartPuzzle(ctx, req.(*StartPuzzleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenGame)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).Listen(m, &gameServiceListenServer{stream})
}

type GameService_ListenServer interface {
	Send(*GameEvent) error
	grpc.ServerStream
}

type gameServiceListenServer struct {
	grpc.ServerStream
}

func (x *gameServiceListenServer) Send(m *GameEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GameService_Create_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _GameService_Join_Handler,
		},
		{
			MethodName: "Rejoin",
			Handler:    _GameService_Rejoin_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _GameService_Leave_Handler,
		},
		{
			MethodName: "StartPuzzle",
			Handler:    _GameService_StartPuzzle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _GameService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sensense.proto",
}

// PuzzleServiceClient is the client API for PuzzleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PuzzleServiceClient interface {
	// streaming service
	Solve(ctx context.Context, opts ...grpc.CallOption) (PuzzleService_SolveClient, error)
}

type puzzleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPuzzleServiceClient(cc grpc.ClientConnInterface) PuzzleServiceClient {
	return &puzzleServiceClient{cc}
}

func (c *puzzleServiceClient) Solve(ctx context.Context, opts ...grpc.CallOption) (PuzzleService_SolveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PuzzleService_serviceDesc.Streams[0], "/PuzzleService/Solve", opts...)
	if err != nil {
		return nil, err
	}
	x := &puzzleServiceSolveClient{stream}
	return x, nil
}

type PuzzleService_SolveClient interface {
	Send(*PuzzleEvent) error
	Recv() (*PuzzleEvent, error)
	grpc.ClientStream
}

type puzzleServiceSolveClient struct {
	grpc.ClientStream
}

func (x *puzzleServiceSolveClient) Send(m *PuzzleEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *puzzleServiceSolveClient) Recv() (*PuzzleEvent, error) {
	m := new(PuzzleEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PuzzleServiceServer is the server API for PuzzleService service.
type PuzzleServiceServer interface {
	// streaming service
	Solve(PuzzleService_SolveServer) error
}

// UnimplementedPuzzleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPuzzleServiceServer struct {
}

func (*UnimplementedPuzzleServiceServer) Solve(PuzzleService_SolveServer) error {
	return status.Errorf(codes.Unimplemented, "method Solve not implemented")
}

func RegisterPuzzleServiceServer(s *grpc.Server, srv PuzzleServiceServer) {
	s.RegisterService(&_PuzzleService_serviceDesc, srv)
}

func _PuzzleService_Solve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PuzzleServiceServer).Solve(&puzzleServiceSolveServer{stream})
}

type PuzzleService_SolveServer interface {
	Send(*PuzzleEvent) error
	Recv() (*PuzzleEvent, error)
	grpc.ServerStream
}

type puzzleServiceSolveServer struct {
	grpc.ServerStream
}

func (x *puzzleServiceSolveServer) Send(m *PuzzleEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *puzzleServiceSolveServer) Recv() (*PuzzleEvent, error) {
	m := new(PuzzleEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PuzzleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PuzzleService",
	HandlerType: (*PuzzleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Solve",
			Handler:       _PuzzleService_Solve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sensense.proto",
}
